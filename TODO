== ROADMAP ==
* Get it to build on Windows
* More verbose output, and a log file that records output
* Get it to run on Windows in -mwindows mode (may require i.e. a seperate main function)
---> Release as alpha1. Dan can try it out at this stage.
* Port orbit-edit to Blender 2.5, for exclusive use
* Skeletal animation (implement only basic running and fly-to-run anims at first)
* Music & sound effects
* More animations, and smooth animation merging
* Create simple versions of some of the story missions
* Make the HUD better
* Shadows
* Particles
* Do a Shadow-of-the-Colossus texture-parallax effect
* Inside/outside effect (HDR?), with light shining through leaves nicely if possible
---> Release as alpha2. Try to reach this point by end of service.
* Improve background stuff (as it is now orbiting stuff is ludicrously oversized)
  - Alternately; find a way to make large objects part of the canon, so we get neat ring effect

* Maybe fix the blinky star problem and also the apparent-star-size changing problem at once:
  - Just use a very simple sphere-like shape instead of a box
  - Or, you know, a significantly more sphere-like shape than the current shape

* Make all custom SConstruct actions work like capsulate, so that scons -Q can be used safely

== OTHER STUFF TO DO ==
Thinh's ideas:
- FOV on acceleration
- Reduced rotation speed, cap

- Consider having an optimized-output build mode that does some of the following:
	- Enables optimization flags (compare -O2 with -O3 to see if latter helps...)
	- Builds the entire project at once to see if g++'s unit-at-a-time thing helps
	- Uses g++'s profiling mechanism with some kind of demo

- In all the places in the program that show a copyright notice, also mention the font license.

- Speed cap enforced with non-linear drag
- After generating meshes in memory from XML, save to raw local system cache for faster loading later 
  - Need to make sure to discard cache if environment changes, or if source data is updated
  - Maybe can also cache textures this way? Probably not going to get much faster than PNG, tho...
- Generate a log file with all debug messages
- For the sake of UI juiciness and following the theme, give the mouse cursor a little bit of momentum ala Per.Oxyd
- Come up with a simple way to do documentation; doxygen's usual format is a pain in the ass
  - Can probably also disable xsdcxx's doxygen doc generation
- Pass boost::shared_ptr by const reference wherever possible
- Make the naming of variables consistent (in particular, use underscore prefix for members)
- Make sure mipmapping and texture compression are both actually working
  - Do mipmapping in advance, when generating ORE file; maybe also switch to faster-loading image format?
- Use a test texture instead of a test color for untextured faces
- Consider using texture packing
- Have the ORE file include pre-calculated information about how much memory must be allocated for the VBOs
- Show the loading animation while loading
- Include all resources in the ORE file (including loading anim, title screen image, sounds, etc)
- Separate out the ORE file into its own repository
- Allow video mode to be changed without having to reinit the entire display module
- Maybe when it is necessary to tilt about z axis while running, I should add some x linear force to simulate banking. Banking would actually occur, since one foot would be pushing sideways to adjust orientation, right?
